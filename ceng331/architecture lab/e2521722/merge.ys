# YUNUS EMRE KELEÅž 2521722
.pos 0x0
init:
    irmovq stack, %rsp
    irmovq array_begin1, %rdi
    irmovq array_end1, %rsi
    irmovq array_begin2, %rdx
    irmovq array_end2, %rcx
    irmovq array_begin3, %r8
    call merge
    halt

#implement your code below (DO NOT CHANGE/REMOVE THIS COMMENT)

merge:
	rrmovq %rdi,%r9 					# mov begin1 to the r9
	rrmovq %rsi,%r10					# mov end1 to the r10
	rrmovq %rdx,%r11					# mov begin2 to the r11
	rrmovq %rcx,%r12					# mov end2 to the r12
	rrmovq %r8,%r13						# mov array beginning to the r13
first_loop:	
	rrmovq %r10,%rbx					# mov end1 to the rbx
	subq %r9,%rbx						# subtract b1 from e1
	jg check_point_fl					# jump to make second check
	jmp check_point_tl					# jump to the third loop cp
check_point_fl:
	rrmovq %r12,%r14					# mov end2 to the r14
	subq %r11,%r14						# subtract b2 from e2
	jle check_point_sl					# jump to the second loop cp
	jmp insert						# jump to block fills array
second_loop:
	mrmovq (%r9),%rax					# mov b1 value to the rax
	rmmovq %rax,(%r13)					# mov value to the arr index
	irmovq $8,%rcx						# pass 8 to the rcx
	addq %rcx,%r9						# add 8 to the b1
	addq %rcx,%r13						# add 8 to the arr pointer
	jmp check_point_sl					# jmp to the second loop cp
check_point_sl:
	rrmovq %r10,%rbx					# mov end1 to the rbx
	subq %r9,%rbx						# subtract b1 from e1
	jg second_loop						# jump to the loop	 	
	jmp check_point_tl					# jmp to the third cp
third_loop:
	mrmovq (%r11),%rax					# mov b2 value to the rax
	rmmovq %rax,(%r13)					# insert value to the arr
	irmovq $8,%rcx						# pass 8 to the rcx
	addq %rcx,%r11						# increment the b2
	addq %rcx,%r13						# increment the arr pointer
	jmp check_point_tl					# jmp to the tl cp
check_point_tl:
	rrmovq %r12,%r14					# move end2 to the r14
	subq %r11,%r14						# subtract b2 from e2
	jg third_loop						# jmp to the third loop
	jmp end_of_the_function					# jmp to the eof
end_of_the_function:
	ret							# halt the function					
	
insert:
	mrmovq (%r9),%rax					# mov b1 value to the rax
	mrmovq (%r11),%rbx					# mov b2 value to the rbx
	subq %rax,%rbx						# subtract b1 from b2
	jg case_b1						# jump to the b1 case
	jmp case_b2						# jump to the b2 case
case_b1:
	mrmovq (%r9),%rax					# mov b1 value to the rax
	rmmovq %rax,(%r13)					# mov value to the arr index
	irmovq $8,%rcx						# pass 8 to the rcx
	addq %rcx,%r9						# add 8 to the b1
	addq %rcx,%r13						# add 8 to the arr pointer
	jmp first_loop						# jmp to the first loop cp
case_b2:			
	mrmovq (%r11),%rax					# mov b2 value to the rax
	rmmovq %rax,(%r13)					# insert value to the arr
	irmovq $8,%rcx						# pass 8 to the rcx
	addq %rcx,%r11						# increment the b2
	addq %rcx,%r13						# increment the arr pointer
	jmp first_loop 						# jmp to the fl cp
	
#implement your code above (DO NOT CHANGE/REMOVE THIS COMMENT)

.pos 0x1008
array_begin1:
    .quad 1
    .quad 2
    .quad 3
    .quad 5
    .quad 17
    .quad 18
    .quad 19
    .quad 110
array_end1:
    .quad 0
array_begin2:
    .quad 10
    .quad 11
    .quad 12
    .quad 200
    .quad 201
    .quad 202
    .quad 203
    .quad 204
array_end2:
    .quad 0
.pos 0x1500
array_begin3:
    .quad 0
.pos 0x1F00
stack:
    .quad 0


